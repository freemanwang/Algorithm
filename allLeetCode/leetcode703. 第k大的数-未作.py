'''

  要求：在可以动态新增数据的一堆数据里，需要始终知道 第K大的数据

 分析：假设加进 n 个数
    1.可以使用排序解决问题，建一个数组，从大到小排，第k个元素就是第K大的元素；
        每次新增元素时，要先比大小再插入，在有序数据里比大小，用二分查找是log n；插入是n，综上是 nlogn 。因为只需要知道 第K大， 因此可以维护一个长为 k 的数组，那时间复杂度就是 k log k； n 个数字加进来，总时间复杂度就是 nk*logk

    2.构建一个大为 k 的最小堆，那么 第k大 的元素就在堆顶，每次插入新数据，如果比 k小 就pass掉；比k大就放入堆,把原本第k小的数淘汰掉，然后调整堆。调整堆时间复杂度记logk，那么 n 个数，总时间复杂度就是 n*logk

    显然用最小堆的办法，时间复杂度更好。
'''

import queue
def kthNum(nums:list, addNums:list):
        
    priQue = queue.PriorityQueue(10)
